---
title: "Mini-Project #03: Do Proportional Electoral College Allocations Yield a More Representative Presidency?"
format: html
editor: visual
---

#### Table of Contents

1.  [Introduction](#1.-Introduction)
2.  [Data Sources](#2.-Data-Sources)
3.  [Data Cleaning and Pre-processing](#3.-Data-Cleaning-and-Pre-processing)
4.  [Data Exploration](#4.-Data-Exploration)
5.  [Conclusion](#5.-Conclusion)

## [1. Introduction]{style="color: cyan;"}

The objective of this analysis is to identify trends, patterns and other factors that contribute to the fairness of an Election. While there are many factors that contribute to a fair and equal election, being able to investigate different type of election methods allows us to make our own conclusion.

This project will attempt to identify different methods for an election using government data. This data will allow us to use quantifiable past voter's past selection without having to survey a large population. Ideally, the result will be to feel content with the current system or propose a new voting method.

## [2. Data Sources]{style="color: cyan;"}

We had to download four different sets of data for this analysis.

Data 1a - House Election 1976 - 2022:

```{r}
#| label: 'House Election 1976 - 2022 code'
#| code-fold: true
#| message: false 
#| warning: false
#| cache: true
#| code-summary: "House Election 1976 - 2022"

#this code assumes you have hand downloaded from https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/IG0UN2  
house_of_reps <- read.csv("C:/Users/velas/OneDrive/Documents/STA9750-2024-FALL/1976-2022-house.csv")
```

Data 1b - Presidential Election 1976 - 2022:

```{r}
#| label: 'Preisdential Election 1976 - 2022 code'
#| code-fold: true
#| message: false 
#| warning: false
#| cache: true
#| code-summary: "Presidential Election 1976 - 2022"

#this code assumes you have hand downloaded from https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/42MVDX  

presidents <- read.csv("C:/Users/velas/OneDrive/Documents/STA9750-2024-FALL/1976-2020-president.csv")
```

Data 2 - Congressional Shapefiles 1976-2012:

```{r}
#| label: 'Congressional Boundaries 1976-2012 code'
#| code-fold: true
#| message: false 
#| warning: false
#| cache: true
#| code-summary: "Congressional Boundaries 1976-2012"
library(httr)
library(sf)
library(dplyr)
library(utils)

# url and string for file
base_url <- "https://cdmaps.polisci.ucla.edu/shp/"
file_names <- sprintf("districts%03d.zip", 1:114)  # Generates file names from districts001.zip to districts114.zip

# temp directory
download_dir <- "congressional_shapefiles"
if (!dir.exists(download_dir)) dir.create(download_dir)

# download & unzip 
download_and_load_shapefile <- function(file_name, sample_fraction = 0.1) {  # Add sample_fraction parameter
  local_zip_path <- file.path(download_dir, file_name)
  url <- paste0(base_url, file_name)
  
  # checking if already downloaded
  if (!file.exists(local_zip_path)) {
    #cat("Downloading", file_name, "...\n")
    GET(url, write_disk(local_zip_path, overwrite = TRUE))
  } else {
    #cat(file_name, "already exists, skipping download.\n")
  }
  
  # Unzip and load the shapefile
  unzip_dir <- file.path(download_dir, sub(".zip$", "", file_name))  # Unzipped folder
  if (!dir.exists(unzip_dir)) {
    unzip(local_zip_path, exdir = unzip_dir)
  }
  
  # load the .shp file
  district_shapes_dir <- file.path(unzip_dir, "districtShapes")
  shp_file <- list.files(district_shapes_dir, pattern = "\\.shp$", full.names = TRUE)
  
  if (length(shp_file) > 0) {
    shapefile_data <- st_read(shp_file, quiet = TRUE)
    
    # Sub-sample the shapefile data (e.g., take 10% of rows)
    shapefile_data <- shapefile_data %>% sample_frac(sample_fraction)
    
    return(shapefile_data)
  } else {
    #message("No shapefile found in 'districtShapes' for", file_name)
    #return(NULL)
  }
}

# Loop through and process the shapefiles with sub-sampling
shapefiles_list <- list()
for (file_name in file_names) {
  shapefile_data <- download_and_load_shapefile(file_name, sample_fraction = 0.1)  # 10% sample
  if (!is.null(shapefile_data)) {
    shapefiles_list[[file_name]] <- shapefile_data
  }
}

```

Data 3 - Congressional Shapefiles 2014-Present:

```{r}
#| label: 'Congressional Boundaries 2014-Present code'
#| code-fold: true
#| message: false 
#| warning: false
#| cache: true
#| code-summary: "Congressional Boundaries 2014-Present"

  # url and string for file
  base_url <- "https://www2.census.gov/geo/tiger/TIGER2024/CD/"
  file_names <- sprintf("tl_2024_%02d_cd119.zip", 1:78)  
  
  # temp directpry
  download_dir <- "census_shapefiles"
  if (!dir.exists(download_dir)) dir.create(download_dir)
  
  # Unzip and load the shapefile
  download_and_load_shapefile <- function(file_name, sample_fraction = 0.1) {
    local_zip_path <- file.path(download_dir, file_name)
    url <- paste0(base_url, file_name)
    
    # Check if file already exists to avoid re-downloading
    if (!file.exists(local_zip_path)) {
      #cat("Downloading", file_name, "...\n")
      GET(url, write_disk(local_zip_path, overwrite = TRUE))
    } else {
      #cat(file_name, "already exists, skipping download.\n")
    }
    
    # Unzip and load the shapefile
    unzip_dir <- file.path(download_dir, sub(".zip$", "", file_name))  # Unzipped folder
    if (!dir.exists(unzip_dir)) {
      unzip(local_zip_path, exdir = unzip_dir)
    }
    
    # Load the .shp file from the unzipped directory
    shp_file <- list.files(unzip_dir, pattern = "\\.shp$", full.names = TRUE)
    
    if (length(shp_file) > 0) {
      census_data <- st_read(shp_file, quiet = TRUE)
      return(census_data)
    } else {
      #message("No shapefile found in unzipped directory for", file_name)
      #return(NULL)
    }
  }
  
  # Loop through each file name, download, and load the shapefile if necessary
  census_shapefiles <- list()
  for (file_name in file_names) {
    census_data <- download_and_load_shapefile(file_name)
    if (!is.null(census_data)) {
      census_shapefiles[[file_name]] <- census_data
    }
  }
  
```

The data 1 sources allows us to take a peek into historical election data for house of representations and presidential races. Additionally, data 2 & 3 show us voting boundaries via SHP files which allow you to plot a graph easily. This is important to make election results more digestible and allow for the viewer to analyze trends throughout the United States

## [3. Data Cleaning and Pre-processing]{style="color: cyan;"}

In this analysis we will clean the data and drop all empty columns as we conduct the tasks provided by the professor. Overall, the data that we are dealing with is pretty clean and organized, the columns are the expected data type as well.

## [4. Data Exploration]{style="color: cyan;"}

::: {.callout-tip title="Task 3: Exploration of Vote Count Data"}
Answer the following using the vote count data files from the MIT Election Data Science Lab. You may answer each with a table or plot as you feel is appropriate.

1.  Which states have gained and lost the most seats in the US House of Representatives between 1976 and 2022?

[Texas, Florida, and California have had the largest increase in Number of House Representatives.]{style="color: orange;"}

[New York, Ohio, and Pennsylvania have had the largest decrease in Number of House Representatives.]{style="color: orange;"}

2.  New York State has a unique "fusion" voting system where one candidate can appear on multiple "lines" on the ballot and their vote counts are totaled. For instance, in 2022, Jerrold Nadler appeared on both the Democrat and Working Families party lines for NYS' 12th Congressional District. He received 200,890 votes total (184,872 as a Democrat and 16,018 as WFP), easily defeating Michael Zumbluskas, who received 44,173 votes across three party lines (Republican, Conservative, and Parent).

    Are there any elections in our data where the election would have had a different outcome if the "fusion" system was not used and candidates only received the votes their received from their "major party line" (Democrat or Republican) and not their total number of votes across all lines?

[There are multiple instances where if "fusion" system was not in place, the election results would have been different. The code block labeled "Task 3 Question 2" depicts a table of all the results that would have been different. We see that there are only 22 occasions where the election results would be different if Fusion voting was not existent.]{style="color: orange;"}

3.  Do presidential candidates tend to run ahead of or run behind congressional candidates in the same state? That is, does a Democratic candidate for president tend to get more votes in a given state than all Democratic congressional candidates in the same state?

[From the graph in "Task 3 Question 3" we see a straight positive correlation between congressional elects and presidential elects for the major parties. This indicates that if a Republican or Democratic president is elected then there is a high chance that that stat will also elect a congressman from the same political party. However this is not the case for non major parties, most likely because it is highly unlikely that a president will be chosen from a non major party.]{style="color: orange;"}

Does this trend differ over time? Does it differ across states or across parties? Are any presidents particularly more or less popular than their co-partisans?

[In recent years, this correlation has gotten stronger which indicates the voters have become more decisive and loyal to party lines.]{style="color: orange;"}
:::

### Task 3 Question 1:

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 3 Question 1"

library(dplyr)
library(ggplot2)
library(tidyverse)
# Filter data for 1976 and 2022, count House seats per state for each year, and calculate the difference
house_count_by_state <- house_of_reps |>
  filter(year == 1976 | year == 2022) |>
  group_by(year, state) |>
  summarise(number_of_reps = n_distinct(district), .groups = "drop") |>
  pivot_wider(names_from = year, values_from = number_of_reps, names_prefix = "year_") |>
  mutate(difference = year_2022 - year_1976)

# Plot the difference graph q1
ggplot(house_count_by_state, aes(x = reorder(state, difference), y = difference)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(
    title = "Number of House Representatives (1976 vs 2022)",
    x = "State",
    y = "Difference in Number of Representatives"
  ) +
  theme_minimal()

```

### Task 3 Question 2:

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 3 Question 2 - Code & Data Cleaning"

# Filter for New York State & general elections only
ny_elections <- house_of_reps |>
  filter(state == "NEW YORK" & stage == "GEN")

# fusion voting results
fusion_results <- ny_elections |>
  group_by(year, district, candidate) |>
  summarise(
    total_fusion_votes = sum(totalvotes), 
    .groups = "drop"
  )

# Popular voting for major parties results
major_party_votes <- ny_elections |>
  filter(party %in% c("DEMOCRAT", "REPUBLICAN")) |>
  group_by(year, district, candidate) |>
  summarise(
    major_party_votes = sum(totalvotes),  
    party = first(party),
    .groups = "drop"
  )

# Find the winners under both systems
# 1. Fusion winner 
fusion_winner <- fusion_results |>
  group_by(year, district) |>
  slice_max(total_fusion_votes, n = 1, with_ties = FALSE) |>
  select(year, district, fusion_winner = candidate, fusion_votes = total_fusion_votes)

# 2. Popular, Major party
major_party_winner <- major_party_votes |>
  group_by(year, district) |>
  slice_max(major_party_votes, n = 1, with_ties = FALSE) |>
  select(year, district, major_winner = candidate, major_party_votes)

# comparing results from two methods mentioned above
comparison <- fusion_winner |>
  inner_join(major_party_winner, by = c("year", "district")) |>
  filter(fusion_winner != major_winner) |>
  select(year, district, fusion_winner, fusion_votes, major_winner, major_party_votes)


```

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 3 Question 2 - Comparison Table"

# comparison table
library(knitr)
library(DT)

#kable(comparison, caption = "Comparison of Fusion Voting vs Major Party Voting Results")

# Display the comparison table as an interactive datatable
datatable(
  comparison,
  caption = "Comparison of Fusion Voting vs Major Party Voting Results",
  options = list(
    pageLength = 10,
    autoWidth = TRUE,
    rownames = FALSE,
    dom = 't<"bottom"ip>',  
    class = 'display compact'  
  )
) %>%
  formatStyle(
    columns = names(comparison),  # Apply style to all columns
    backgroundColor = 'white',    # White background
    color = 'black',              # Black text
    borderColor = 'black'         # Black borders
  )
```

### Task 3 Question 3:

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 3 Question 3 - Code & Data Cleaning"

library(dplyr)
library(ggplot2)
library(tidyr)


# Summarize houose of reps by state, year, and party
house_of_reps_q3 <- house_of_reps %>%
  group_by(year, state, party) %>%
  summarise(total_congressional_votes = sum(totalvotes), .groups = "drop")


# Summarize presidential votes by state, year, and party
presidents_q3 <- presidents %>%
  group_by(year, state, party_simplified) %>%
  summarise(presidential_votes = sum(totalvotes), .groups = "drop") %>%
  rename(party = party_simplified)

# Merge presidential & house of reps data
comparison_data <- presidents_q3 %>%
  inner_join(house_of_reps_q3, by = c("year", "state", "party"))

# measure difference
comparison_data <- comparison_data %>%
  mutate(vote_difference = presidential_votes - total_congressional_votes)

# Combine presidential results and HOR results
comparison_long <- presidents_q3 %>%
  rename(total_presidential_votes = presidential_votes) %>%
  inner_join(house_of_reps_q3, by = c("year", "state", "party")) %>%
  pivot_longer(
    cols = c(total_presidential_votes, total_congressional_votes),
    names_to = "vote_type",
    values_to = "votes"
  )

```

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 3 Question 3 - Graph"

library(dplyr)
library(ggplot2)
library(tidyr)


# bar graph with trend line
ggplot(comparison_long, aes(x = factor(year), y = votes, fill = vote_type)) +
  geom_bar(stat = "identity", position = "dodge") +
  geom_smooth(aes(group = vote_type, color = vote_type), method = "lm", se = FALSE, linetype = "dashed") +
  facet_wrap(~ party) +
  labs(
    title = "Presidential vs Congressional Votes by Year and Party with Trend Lines",
    x = "Year",
    y = "Total Votes",
    fill = "Vote Type",
    color = "Trend Line"
  ) +
  scale_fill_manual(values = c("total_presidential_votes" = "steelblue", "total_congressional_votes" = "seagreen1")) +
  scale_color_manual(values = c("total_presidential_votes" = "blue", "total_congressional_votes" = "seagreen")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

### Task 4:

[In Task 4, we will begin to examine some SHP files. As stated before, these files allow for accurate map plotting.]{style="color: orange;"}

[First you can see an outline of all the NYC boroughs. Second you will see the same map but filled in with some color. Keep in mind we can set the fill to be any colums as the fill color. This is just an examplpe.]{style="color: orange;"}
### NYC Boundary Plot:

```{r}
#| code-fold: true
#| warning: false

#| code-summary: "Task 4 - NYC Boundary"

library(sf)

# Downloading zip from site
url <- "https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile"
zip_file <- "Borough Boundaries.zip"  # Use the correct name

# Download the ZIP file if needed
if (!file.exists(zip_file)) {
  download.file(url, destfile = zip_file, mode = "wb")
}

# Create a temporary directory and unzip the file
temp_dir <- tempdir()
unzip(zip_file, exdir = temp_dir)

# Find the .shp file within the extracted contents
shp_file <- list.files(temp_dir, pattern = "\\.shp$", full.names = TRUE)

# Check if the .shp file was found, then load it into R
if (length(shp_file) > 0) {
  nyc_sf <- read_sf(shp_file)
  #print(nyc_sf)
} else {
  stop(NULL)
}
#outline nyc map
ggplot(nyc_sf, 
       aes(geometry=geometry)) + 
  geom_sf()

#nyc map color
ggplot(nyc_sf, 
       aes(geometry=geometry, 
           fill = shape_area)) + 
  geom_sf()

```

### Task 5

::: {.callout-tip title="Task 5: Chloropleth Visualization of the 2000 Presidential Election Electoral College Results"}
Using the data you downloaded earlier, create a *chloropleth* visualization of the electoral college results for the 2000 presidential election (Bush *vs.* Gore), coloring each state by the party that won the most votes in that state. Your result should look something like this:

![](https://upload.wikimedia.org/wikipedia/commons/1/19/ElectoralCollege2000.svg)

**Taken from [Wikipedia](https://en.wikipedia.org/wiki/2000_United_States_presidential_election)**

It is not required, but to make the very best plot, you may want to look up:

1)  How to "inset" Alaska and Hawaii instead of plotting their true map locations.
2)  How to add labels to a chloropleth in `ggplot2`
3)  How to label the small states in the North-East

but these steps are not required as they are a bit advanced.
:::

[I will attempt to recreate the map above. In the first block of code you will see how I cleaned the data from section 2 in order to replicate a united states map.]{style="color: orange;"}

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 5 - USA 2000 Electoral College - Code & Data Cleaning"
#szn graphs


#2000 results for president
presidents_2000 <- presidents %>%
  filter(year == 2000) %>%
  group_by(state) %>%
  slice_max(candidatevotes, n = 1, with_ties = FALSE) %>%
  select(state, candidate, party_simplified,candidatevotes)

#electral college number per state
house_of_reps_2000 <- house_of_reps |>
  filter(year == 2000) |>
  group_by(state) |>
  summarize(district_count = n_distinct(district))


#combine elec college & presidents
combined_data_2000 <- house_of_reps_2000 %>%
  inner_join(presidents_2000, by = "state")  %>%
  mutate(elec_college = district_count+2)





#Create look up table for state and STATEFP code (we will join by state later) to SHP files
state_lookup <- data.frame(
  STATEFP = c("01", "02", "04", "05", "06", "08", "09", "10", "12", "13", "15", "16", "17", "18", "19", "20", 
              "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", 
              "37", "38", "39", "40", "41", "42", "44", "45", "46", "47", "48", "49", "50", "51", "53", "54", 
              "55", "56"),
  state = c("Alabama", "Alaska", "Arizona", "Arkansas", "California", "Colorado", "Connecticut", "Delaware", 
                 "Florida", "Georgia", "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", 
                 "Louisiana", "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", "Mississippi", 
                 "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", 
                 "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", 
                 "Rhode Island", "South Carolina", "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", 
                 "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"),
  state_abbr = c("AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID", "IL", "IN", "IA", "KS", 
                 "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", 
                 "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", 
                 "WI", "WY")
)

# Combine all shapefiles 
all_states <- bind_rows(census_shapefiles[c(1:56)])
all_states <- all_states %>%
  left_join(state_lookup, by = "STATEFP")


all_states_outline <- all_states %>%
  group_by(STATEFP) %>%
  summarize(geometry = st_union(geometry)) 

all_states_outline <- all_states_outline %>%
  left_join(state_lookup, by = "STATEFP") 

all_states_outline <- all_states_outline %>%
  mutate(state = str_to_upper(state))

location_and_election <- all_states_outline %>%
  full_join(combined_data_2000, by = "state") %>%
  drop_na()

```

[Below is my attempt at recreating the electoral college votes for 2000. You can clearly see my limited experience with the R language through this graph. This graph is hard to digest because areas like Hawaii and Alaska skew the map and make it extremely hard to see the electoral votes in the main land.]{style="color: orange;"}

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 5 - USA 2000 Electoral College - Entire USA"
#| 
library(sf)
library(dplyr)
library(ggplot2)
#graph all of USA
ggplot(data = location_and_election) +
  geom_sf(aes(fill = party_simplified), color = "black") +  # Color by winner (Bush or Gore)
  scale_fill_manual(values = c("REPUBLICAN" = "red", "DEMOCRAT" = "blue"), name = "Winner") +
  geom_text(aes(label = elec_college, geometry = geometry), size = 3, stat = "sf_coordinates") +
  labs(title = "2000 U.S. Presidential Election Results by State") +
  theme_minimal() +
  theme(legend.position = "bottom")

```

[To make this map easier to read, I excluded Alaska and Hawaii. This will allow us to analyze the votes of the states within the main land.]{style="color: orange;"}

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 5 - USA 2000 Electoral College - Mainland USA"
#| 
library(sf)
library(dplyr)
library(ggplot2)
#exclude hawaii & alaska
common_crs <- st_crs(4326)
contiguous_us <- location_and_election %>%
  filter(!state %in% c("ALASKA", "HAWAII")) %>%
  st_transform(common_crs)

# Main land graph
ggplot(data = contiguous_us) +
  geom_sf(aes(fill = party_simplified), color = "white") +  # Color by winner (Bush or Gore)
  scale_fill_manual(values = c("REPUBLICAN" = "red", "DEMOCRAT" = "blue"), name = "Winner") +
  geom_text(aes(label = elec_college, geometry = geometry), size = 5, stat = "sf_coordinates", color = "black") +
  labs(title = "2000 U.S. Presidential Election Results by State") +
  theme_minimal() +
  theme(legend.position = "bottom")

```

### Task 6

::: {.callout-tip title="Task 6: Advanced Chloropleth Visualization of Electoral College Results"}
Modify your previous code to make either an ~~*animated*~~ *faceted* version showing election results over time.

You may want to set `facet_wrap` or `facet_grid` to use a single column and [adjust the figure size](https://quarto.org/docs/authoring/figures.html#computations) for the best reading experience.
:::

[Here we can see how states have changed from red to blue and vise versa. It is intresting to see that the middle of the country remains red and the coasts are typically blue. It is more intresting when those states are flipped at certain years.]{style="color: orange;"}

```{r}
#| code-fold: true
#| message: false
#| warning: false
#| code-summary: "Task 6 - USA Electoral College - Mainland USA - Code"


#same clean up job as in Task 5 but making sure to keep years in the dataset
presidents_all <- presidents %>%
  group_by(state,year) %>%
  slice_max(candidatevotes, n = 1, with_ties = FALSE) %>%
  select(state, candidate, party_simplified,candidatevotes)

house_of_reps_all <- house_of_reps %>%
  group_by(state,year) %>%
  summarize(district_count = n_distinct(district))


combined_data_all <- presidents_all %>%
  inner_join(house_of_reps_all, by = c("state","year"))  %>%
  mutate(elec_college = district_count+2)



location_and_election_all <- all_states_outline %>%
  full_join(combined_data_all, by = "state") %>%
  drop_na()


contiguous_us_all <- location_and_election_all %>%
  filter(!state %in% c("ALASKA", "HAWAII")) %>%
  st_transform(common_crs)


```

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 6 - USA Electoral College - Mainland USA - Facet by Year Graph"
#| 
library(sf)
library(dplyr)
library(ggplot2)
ggplot(data = contiguous_us_all) +
  geom_sf(aes(fill = party_simplified), color = "black") +  
  scale_fill_manual(values = c("REPUBLICAN" = "red", "DEMOCRAT" = "blue"), name = "Winner") +
  geom_text(aes(label = elec_college, geometry = geometry), size = 3, stat = "sf_coordinates") +
  labs(title = "2000 U.S. Presidential Election Results by State") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  facet_wrap(~ year) 

```

### Task 7

::: {.callout-tip title="Task 7: Evaluating Fairness of ECV Allocation Schemes"}
Write a fact check evaluating the fairness of the different ECV electoral allocation schemes.

To do so, you should first determine which allocation scheme you consider "fairest". You should then see which schemes give different results, if they ever do. To make your fact check more compelling, select one election where the ECV scheme had the largest impact--if one exists--and explain how the results would have been different under a different ECV scheme.

As you perform your analysis, you may assume that the District of Columbia has three ECVs, which are allocated to the Democratic candidate under all schemes except possibly national popular vote.\[\^8\]
:::

[I believe that the "winner-takes-all" approach is the fairest system, as it ensures that each state’s collective voice is heard. This method allows individuals with unique perspectives to have an impact, especially in an environment where media often shapes public opinion. Being an independent thinker can feel rare, and those who stray from mainstream ideas are sometimes marginalized. In a "winner-takes-all" system, if there are enough people in your state who share your viewpoint, your state can allocate all its electoral votes to the candidate you support. If votes were divided by district, I suspect we would see more gerrymandering, with boundaries manipulated to influence outcomes in favor of one party.

Recently, comparing the map below to the map in Task 6, we can see a recent election (2016) would have gotten a different candidate if the status quo was to elect the popular vote instead of electoral college. ]{style="color: orange;"}

```{r}
#| code-fold: true
#| warning: false
#| code-summary: "Task 6 - USA Electoral College - Mainland USA - Facet by Year Graph"
#| 
library(sf)
library(dplyr)
library(ggplot2)
ggplot(data = contiguous_us_all) +
  geom_sf(aes(fill = party_simplified), color = "black") +  
  scale_fill_manual(values = c("REPUBLICAN" = "red", "DEMOCRAT" = "blue"), name = "Winner") +
  geom_text(aes(label = elec_college, geometry = geometry), size = 3, stat = "sf_coordinates") +
  labs(title = "2000 U.S. Presidential Election Results by State") +
  theme_minimal() +
  theme(legend.position = "bottom") +
  facet_wrap(~ year) 

```

## [5. Conclusion]{style="color: cyan;"}

[In conclusion, the Electoral College system provides a balanced approach to electing the President of the United States by ensuring representation for both populous and less populous states. By giving each state the power to choose how its electoral votes are allocated, the process respects the unique preferences and values of individual states, allowing them to play a significant role in the election outcome. This decentralized approach is what makes the system fundamentally democratic, as it empowers states to represent the voices of their constituents in a way that directly influences the selection of national leadership. The Electoral College, therefore, not only balances the interests of diverse regions but also upholds a fair process that reflects the principles of federalism and democracy.]{style="color: orange;"}
